Функция ПолучитьВзаимодействия(ЗапросHTTP) Экспорт
	
	Идентификатор = ЗапросHTTP.ПараметрыЗапроса.Получить("uuid");
	ТипДокумента  = ЗапросHTTP.ПараметрыЗапроса.Получить("type");
	
	Если ЗначениеЗаполнено(Идентификатор) И ЗначениеЗаполнено(ТипДокумента) Тогда
		Возврат ПолучитьВзаимодействиеПоUUID(Идентификатор, ТипДокумента)	
	Иначе
		Возврат ПолучитьВсеВзаимодействия();
	КонецЕсли;
		
КонецФункции

Функция ПолучитьВсеВзаимодействия() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Взаимодействия.Ссылка КАК uuid,
		|	Взаимодействия.Номер КАК num,
		|	Взаимодействия.Дата КАК date,
		|	Взаимодействия.Автор.Представление КАК author,
		|	Взаимодействия.Важность КАК importance,
		|	Взаимодействия.Тема КАК theme
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбщаяСтруктураВзаимодействий = Новый Структура;
	
	МассивВзаимодействий = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураВзаимодействия = Новый Структура;
		
		СтруктураВзаимодействия.Вставить("uuid", XMLСтрока(ВыборкаДетальныеЗаписи.uuid));
		СтруктураВзаимодействия.Вставить("num", ВыборкаДетальныеЗаписи.num);
		СтруктураВзаимодействия.Вставить("date", Формат(ВыборкаДетальныеЗаписи.date, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("author", ВыборкаДетальныеЗаписи.author);
		СтруктураВзаимодействия.Вставить("importance", XMLСтрока(ВыборкаДетальныеЗаписи.importance));
		СтруктураВзаимодействия.Вставить("theme", ВыборкаДетальныеЗаписи.theme);
		
		ТипДокумента = react_ОбщегоНазначения.ПолучитьТипВзаимодействия(ВыборкаДетальныеЗаписи.uuid);
		СтруктураВзаимодействия.Вставить("typeBack", ТипДокумента.typeBack);
		СтруктураВзаимодействия.Вставить("type", ТипДокумента.type);
		СтруктураВзаимодействия.Вставить("frontDocName", ТипДокумента.frontDocName);
		
		МассивВзаимодействий.Добавить(СтруктураВзаимодействия);
	КонецЦикла;
	
	ОбщаяСтруктураВзаимодействий.Вставить("actions", МассивВзаимодействий);
	
	Возврат react_ОбщегоНазначения.МассивСтруктурВJSON(ОбщаяСтруктураВзаимодействий);
	
КонецФункции

Функция ПолучитьВзаимодействиеПоUUID(uuid, ТипДокумента) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор(uuid);
	
	Ссылка = Документы[ТипДокумента].ПолучитьСсылку(Идентификатор);
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Встреча") Тогда
	    Возврат ПолучитьДокументыВстреча(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
		Возврат ПолучитьДокументыЗапланированноеВзаимодействие(Ссылка);	
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СообщениеSMS") Тогда
		Возврат ПолучитьДокументыСообщениеSMS(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Возврат ПолучитьДокументыТелефонныйЗвонок(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Возврат ПолучитьДокументыЭлектронноеПисьмоВходящее(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
	    Возврат ПолучитьДокументыЭлектронноеПисьмоИсходящее(Ссылка);
	КонецЕсли;
		
КонецФункции

#Область ПолучениеДокументов

//done
Функция ПолучитьДокументыВстреча(Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Встреча.Ссылка КАК uuid,
		|	Встреча.Номер КАК num,
		|	Встреча.Дата КАК date,
		|	Встреча.Автор.Представление КАК author,
		|	Встреча.Важность КАК importance,
		|	Встреча.ДатаНачала КАК date_beginning,
		|	Встреча.ДатаОкончания КАК date_ending,
		|	Встреча.МестоПроведенияВстречи КАК meeting_place,
		|	Встреча.Описание КАК description,
		|	Встреча.Ответственный.Представление КАК responsible,
		|	Встреча.СписокУчастников КАК members_list,
		|	Встреча.ВзаимодействиеОснование.Представление КАК actions_basis_representation,
		|	Встреча.ВзаимодействиеОснование КАК actions_basis,
		|	Встреча.Тема КАК theme,
		|	Встреча.Комментарий КАК comment,
		|	Встреча.Представление КАК representation
		|ИЗ
		|	Документ.Встреча КАК Встреча";
		Если НЕ Ссылка = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "	
				|ГДЕ
				|	Встреча.Ссылка = &Ссылка
				|	И НЕ Встреча.ПометкаУдаления";	
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
		КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбщаяСтруктураВзаимодействий = Новый Структура;
	
	МассивВзаимодействий = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураВзаимодействия = Новый Структура;
		
		СтруктураВзаимодействия.Вставить("uuid", XMLСтрока(ВыборкаДетальныеЗаписи.uuid));
		СтруктураВзаимодействия.Вставить("num", ВыборкаДетальныеЗаписи.num);
		СтруктураВзаимодействия.Вставить("date", Формат(ВыборкаДетальныеЗаписи.date, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("dateISO", XMLСтрока(ВыборкаДетальныеЗаписи.date));
		СтруктураВзаимодействия.Вставить("author", XMLСтрока(ВыборкаДетальныеЗаписи.author));
		СтруктураВзаимодействия.Вставить("importance", XMLСтрока(ВыборкаДетальныеЗаписи.importance));
		
		СтруктураВзаимодействия.Вставить("date_beginning", Формат(ВыборкаДетальныеЗаписи.date_beginning, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("date_ending", Формат(ВыборкаДетальныеЗаписи.date_ending, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("meeting_place", ВыборкаДетальныеЗаписи.meeting_place);
		СтруктураВзаимодействия.Вставить("description", ВыборкаДетальныеЗаписи.description);
		СтруктураВзаимодействия.Вставить("responsible", XMLСтрока(ВыборкаДетальныеЗаписи.responsible));
		СтруктураВзаимодействия.Вставить("members_list", ВыборкаДетальныеЗаписи.members_list);
		СтруктураВзаимодействия.Вставить("actions_basis", XMLСтрока(ВыборкаДетальныеЗаписи.actions_basis));
		СтруктураВзаимодействия.Вставить("actions_basis_representation", XMLСтрока(ВыборкаДетальныеЗаписи.actions_basis_representation));
		СтруктураВзаимодействия.Вставить("theme", ВыборкаДетальныеЗаписи.theme);		
		СтруктураВзаимодействия.Вставить("comment", ВыборкаДетальныеЗаписи.comment);
		СтруктураВзаимодействия.Вставить("representation", ВыборкаДетальныеЗаписи.representation);
		
		ТипДокумента = react_ОбщегоНазначения.ПолучитьТипВзаимодействия(ВыборкаДетальныеЗаписи.uuid);
		СтруктураВзаимодействия.Вставить("typeBack", ТипДокумента.typeBack);
		СтруктураВзаимодействия.Вставить("type", ТипДокумента.type);
		СтруктураВзаимодействия.Вставить("frontDocName", ТипДокумента.frontDocName);
		
		МассивВзаимодействий.Добавить(СтруктураВзаимодействия);
	КонецЦикла;
	
	ОбщаяСтруктураВзаимодействий.Вставить("actions", МассивВзаимодействий);
	
	Возврат react_ОбщегоНазначения.МассивСтруктурВJSON(ОбщаяСтруктураВзаимодействий);
	
КонецФункции

//done
Функция ПолучитьДокументыЗапланированноеВзаимодействие(Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапланированноеВзаимодействие.Ссылка КАК uuid,
		|	ЗапланированноеВзаимодействие.Номер КАК num,
		|	ЗапланированноеВзаимодействие.Дата КАК date,
		|	ЗапланированноеВзаимодействие.Автор.Представление КАК author,
		|	ЗапланированноеВзаимодействие.Важность КАК importance,
		|	ЗапланированноеВзаимодействие.Описание КАК description,
		|	ЗапланированноеВзаимодействие.Ответственный.Представление КАК responsible,
		|	ЗапланированноеВзаимодействие.СписокУчастников КАК members_list,
		|	ЗапланированноеВзаимодействие.ВзаимодействиеОснование.Представление КАК actions_basis,
		|	ЗапланированноеВзаимодействие.Тема КАК theme,
		|	ЗапланированноеВзаимодействие.Комментарий КАК comment,
		|	ЗапланированноеВзаимодействие.Представление КАК representation
		|ИЗ
		|	Документ.ЗапланированноеВзаимодействие КАК ЗапланированноеВзаимодействие";
		Если НЕ Ссылка = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "	
				|ГДЕ
				|	ЗапланированноеВзаимодействие.Ссылка = &Ссылка
				|	И НЕ ЗапланированноеВзаимодействие.ПометкаУдаления";	
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
		КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбщаяСтруктураВзаимодействий = Новый Структура;
	
	МассивВзаимодействий = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураВзаимодействия = Новый Структура;
		
		СтруктураВзаимодействия.Вставить("uuid", XMLСтрока(ВыборкаДетальныеЗаписи.uuid));
		СтруктураВзаимодействия.Вставить("num", ВыборкаДетальныеЗаписи.num);
		СтруктураВзаимодействия.Вставить("date", Формат(ВыборкаДетальныеЗаписи.date, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("author", XMLСтрока(ВыборкаДетальныеЗаписи.author));
		СтруктураВзаимодействия.Вставить("importance", XMLСтрока(ВыборкаДетальныеЗаписи.importance));
		
		СтруктураВзаимодействия.Вставить("description", ВыборкаДетальныеЗаписи.description);
		СтруктураВзаимодействия.Вставить("responsible", XMLСтрока(ВыборкаДетальныеЗаписи.responsible));
		СтруктураВзаимодействия.Вставить("members_list", ВыборкаДетальныеЗаписи.members_list);
		СтруктураВзаимодействия.Вставить("actions_basis", XMLСтрока(ВыборкаДетальныеЗаписи.actions_basis));	
		СтруктураВзаимодействия.Вставить("theme", ВыборкаДетальныеЗаписи.theme);		
		СтруктураВзаимодействия.Вставить("comment", ВыборкаДетальныеЗаписи.comment);
		СтруктураВзаимодействия.Вставить("representation", ВыборкаДетальныеЗаписи.representation);
		
		ТипДокумента = react_ОбщегоНазначения.ПолучитьТипВзаимодействия(ВыборкаДетальныеЗаписи.uuid);
		СтруктураВзаимодействия.Вставить("typeBack", ТипДокумента.typeBack);
		СтруктураВзаимодействия.Вставить("type", ТипДокумента.type);
		СтруктураВзаимодействия.Вставить("frontDocName", ТипДокумента.frontDocName);
		
		МассивВзаимодействий.Добавить(СтруктураВзаимодействия);
	КонецЦикла;
	
	ОбщаяСтруктураВзаимодействий.Вставить("actions", МассивВзаимодействий);
	
	Возврат react_ОбщегоНазначения.МассивСтруктурВJSON(ОбщаяСтруктураВзаимодействий);
	
КонецФункции

//done
Функция ПолучитьДокументыСообщениеSMS(Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщениеSMS.Ссылка КАК uuid,
		|	СообщениеSMS.Номер КАК num,
		|	СообщениеSMS.Дата КАК date,
		|	СообщениеSMS.Автор.Представление КАК author,
		|	СообщениеSMS.Важность КАК importance,
		|	СообщениеSMS.Ответственный.Представление КАК responsible,
		|	СообщениеSMS.СписокУчастников КАК members_list,
		|	СообщениеSMS.ВзаимодействиеОснование.Представление КАК actions_basis,
		|	СообщениеSMS.Тема КАК theme,
		|	СообщениеSMS.Комментарий КАК comment,
		|	СообщениеSMS.Представление КАК representation,
		|	СообщениеSMS.ТекстСообщения КАК text_message,
		|	СообщениеSMS.Состояние КАК status
		|ИЗ
		|	Документ.СообщениеSMS КАК СообщениеSMS";
		Если НЕ Ссылка = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "	
				|ГДЕ
				|	СообщениеSMS.Ссылка = &Ссылка
				|	И НЕ СообщениеSMS.ПометкаУдаления";	
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
		КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбщаяСтруктураВзаимодействий = Новый Структура;
	
	МассивВзаимодействий = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураВзаимодействия = Новый Структура;
		
		СтруктураВзаимодействия.Вставить("uuid", XMLСтрока(ВыборкаДетальныеЗаписи.uuid));
		СтруктураВзаимодействия.Вставить("num", ВыборкаДетальныеЗаписи.num);
		СтруктураВзаимодействия.Вставить("date", Формат(ВыборкаДетальныеЗаписи.date, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("author", XMLСтрока(ВыборкаДетальныеЗаписи.author));
		СтруктураВзаимодействия.Вставить("importance", XMLСтрока(ВыборкаДетальныеЗаписи.importance));
		
		СтруктураВзаимодействия.Вставить("responsible", XMLСтрока(ВыборкаДетальныеЗаписи.responsible));
		СтруктураВзаимодействия.Вставить("members_list", ВыборкаДетальныеЗаписи.members_list);
		СтруктураВзаимодействия.Вставить("actions_basis", XMLСтрока(ВыборкаДетальныеЗаписи.actions_basis));	
		СтруктураВзаимодействия.Вставить("theme", ВыборкаДетальныеЗаписи.theme);		
		СтруктураВзаимодействия.Вставить("comment", ВыборкаДетальныеЗаписи.comment);
		СтруктураВзаимодействия.Вставить("representation", ВыборкаДетальныеЗаписи.representation);
		СтруктураВзаимодействия.Вставить("text_message", ВыборкаДетальныеЗаписи.text_message);
		СтруктураВзаимодействия.Вставить("status", XMLСтрока(ВыборкаДетальныеЗаписи.status));
		
		ТипДокумента = react_ОбщегоНазначения.ПолучитьТипВзаимодействия(ВыборкаДетальныеЗаписи.uuid);
		СтруктураВзаимодействия.Вставить("typeBack", ТипДокумента.typeBack);
		СтруктураВзаимодействия.Вставить("type", ТипДокумента.type);
		СтруктураВзаимодействия.Вставить("frontDocName", ТипДокумента.frontDocName);
		
		МассивВзаимодействий.Добавить(СтруктураВзаимодействия);
	КонецЦикла;
	
	ОбщаяСтруктураВзаимодействий.Вставить("actions", МассивВзаимодействий);
	
	Возврат react_ОбщегоНазначения.МассивСтруктурВJSON(ОбщаяСтруктураВзаимодействий);
	
КонецФункции

//done
Функция ПолучитьДокументыТелефонныйЗвонок(Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТелефонныйЗвонок.Ссылка КАК uuid,
		|	ТелефонныйЗвонок.Номер КАК num,
		|	ТелефонныйЗвонок.Дата КАК date,
		|	ТелефонныйЗвонок.Автор.Представление КАК author,
		|	ТелефонныйЗвонок.Важность КАК importance,
		|	ТелефонныйЗвонок.Описание КАК description,
		|	ТелефонныйЗвонок.Ответственный.Представление КАК responsible,
		|	ТелефонныйЗвонок.ВзаимодействиеОснование.Представление КАК actions_basis,
		|	ТелефонныйЗвонок.Тема КАК theme,
		|	ТелефонныйЗвонок.Комментарий КАК comment,
		|	ТелефонныйЗвонок.Представление КАК representation,
		|	ТелефонныйЗвонок.АбонентКакСвязаться КАК reach_method,
		|	ТелефонныйЗвонок.АбонентКонтакт.Представление КАК contact,
		|	ТелефонныйЗвонок.Входящий КАК incoming
		|ИЗ
		|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок";
		Если НЕ Ссылка = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "	
				|ГДЕ
				|	ТелефонныйЗвонок.Ссылка = &Ссылка
				|	И НЕ ТелефонныйЗвонок.ПометкаУдаления";	
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
		КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбщаяСтруктураВзаимодействий = Новый Структура;
	
	МассивВзаимодействий = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураВзаимодействия = Новый Структура;
		
		СтруктураВзаимодействия.Вставить("uuid", XMLСтрока(ВыборкаДетальныеЗаписи.uuid));
		СтруктураВзаимодействия.Вставить("num", ВыборкаДетальныеЗаписи.num);
		СтруктураВзаимодействия.Вставить("date", Формат(ВыборкаДетальныеЗаписи.date, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("author", XMLСтрока(ВыборкаДетальныеЗаписи.author));
		СтруктураВзаимодействия.Вставить("importance", XMLСтрока(ВыборкаДетальныеЗаписи.importance));
		
		СтруктураВзаимодействия.Вставить("description", ВыборкаДетальныеЗаписи.description);
		СтруктураВзаимодействия.Вставить("responsible", XMLСтрока(ВыборкаДетальныеЗаписи.responsible));
		СтруктураВзаимодействия.Вставить("actions_basis", XMLСтрока(ВыборкаДетальныеЗаписи.actions_basis));	
		СтруктураВзаимодействия.Вставить("theme", ВыборкаДетальныеЗаписи.theme);		
		СтруктураВзаимодействия.Вставить("comment", ВыборкаДетальныеЗаписи.comment);
		СтруктураВзаимодействия.Вставить("representation", ВыборкаДетальныеЗаписи.representation);
		СтруктураВзаимодействия.Вставить("reach_method", ВыборкаДетальныеЗаписи.reach_method);
		СтруктураВзаимодействия.Вставить("contact", XMLСтрока(ВыборкаДетальныеЗаписи.contact));
		СтруктураВзаимодействия.Вставить("incoming", XMLСтрока(ВыборкаДетальныеЗаписи.incoming));
		
		ТипДокумента = react_ОбщегоНазначения.ПолучитьТипВзаимодействия(ВыборкаДетальныеЗаписи.uuid);
		СтруктураВзаимодействия.Вставить("typeBack", ТипДокумента.typeBack);
		СтруктураВзаимодействия.Вставить("type", ТипДокумента.type);
		СтруктураВзаимодействия.Вставить("frontDocName", ТипДокумента.frontDocName);
		
		МассивВзаимодействий.Добавить(СтруктураВзаимодействия);
	КонецЦикла;
	
	ОбщаяСтруктураВзаимодействий.Вставить("actions", МассивВзаимодействий);
	
	Возврат react_ОбщегоНазначения.МассивСтруктурВJSON(ОбщаяСтруктураВзаимодействий);
	
КонецФункции

//-
Функция ПолучитьДокументыЭлектронноеПисьмоВходящее(Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Встреча.Ссылка КАК uuid,
		|	Встреча.Номер КАК num,
		|	Встреча.Дата КАК date,
		|	Встреча.Автор КАК author,
		|	Встреча.Важность КАК importance,
		|	Встреча.ДатаНачала КАК date_beginning,
		|	Встреча.ДатаОкончания КАК date_ending,
		|	Встреча.МестоПроведенияВстречи КАК meeting_place,
		|	Встреча.Описание КАК description,
		|	Встреча.Ответственный КАК responsible,
		|	Встреча.СписокУчастников КАК members_list,
		|	Встреча.ВзаимодействиеОснование КАК actions_basis,
		|	Встреча.Тема КАК theme,
		|	Встреча.Комментарий КАК comment,
		|	Встреча.Представление КАК representation
		|ИЗ
		|	Документ.Встреча КАК Встреча";
		Если НЕ Ссылка = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "	
				|ГДЕ
				|	Встреча.Ссылка = &Ссылка
				|	И НЕ Встреча.ПометкаУдаления";	
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
		КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбщаяСтруктураВзаимодействий = Новый Структура;
	
	МассивВзаимодействий = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураВзаимодействия = Новый Структура;
		
		СтруктураВзаимодействия.Вставить("uuid", XMLСтрока(ВыборкаДетальныеЗаписи.uuid));
		СтруктураВзаимодействия.Вставить("num", ВыборкаДетальныеЗаписи.num);
		СтруктураВзаимодействия.Вставить("date", Формат(ВыборкаДетальныеЗаписи.date, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("author", ВыборкаДетальныеЗаписи.author);
		СтруктураВзаимодействия.Вставить("importance", XMLСтрока(ВыборкаДетальныеЗаписи.importance));
		
		СтруктураВзаимодействия.Вставить("date_beginning", Формат(ВыборкаДетальныеЗаписи.date_beginning, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("date_ending", Формат(ВыборкаДетальныеЗаписи.date_ending, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("meeting_place", ВыборкаДетальныеЗаписи.meeting_place);
		СтруктураВзаимодействия.Вставить("description", ВыборкаДетальныеЗаписи.description);
		СтруктураВзаимодействия.Вставить("responsible", Строка(ВыборкаДетальныеЗаписи.responsible));
		СтруктураВзаимодействия.Вставить("members_list", ВыборкаДетальныеЗаписи.members_list);
		СтруктураВзаимодействия.Вставить("actions_basis", Строка(ВыборкаДетальныеЗаписи.actions_basis));	
		СтруктураВзаимодействия.Вставить("theme", ВыборкаДетальныеЗаписи.theme);		
		СтруктураВзаимодействия.Вставить("comment", ВыборкаДетальныеЗаписи.comment);
		СтруктураВзаимодействия.Вставить("representation", ВыборкаДетальныеЗаписи.representation);
		
		ТипДокумента = react_ОбщегоНазначения.ПолучитьТипВзаимодействия(ВыборкаДетальныеЗаписи.uuid);
		СтруктураВзаимодействия.Вставить("typeBack", ТипДокумента.typeBack);
		СтруктураВзаимодействия.Вставить("type", ТипДокумента.type);
		СтруктураВзаимодействия.Вставить("frontDocName", ТипДокумента.frontDocName);
		
		МассивВзаимодействий.Добавить(СтруктураВзаимодействия);
	КонецЦикла;
	
	ОбщаяСтруктураВзаимодействий.Вставить("actions", МассивВзаимодействий);
	
	Возврат react_ОбщегоНазначения.МассивСтруктурВJSON(ОбщаяСтруктураВзаимодействий);
	
КонецФункции

//-
Функция ПолучитьДокументыЭлектронноеПисьмоИсходящее(Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Встреча.Ссылка КАК uuid,
		|	Встреча.Номер КАК num,
		|	Встреча.Дата КАК date,
		|	Встреча.Автор КАК author,
		|	Встреча.Важность КАК importance,
		|	Встреча.ДатаНачала КАК date_beginning,
		|	Встреча.ДатаОкончания КАК date_ending,
		|	Встреча.МестоПроведенияВстречи КАК meeting_place,
		|	Встреча.Описание КАК description,
		|	Встреча.Ответственный КАК responsible,
		|	Встреча.СписокУчастников КАК members_list,
		|	Встреча.ВзаимодействиеОснование КАК actions_basis,
		|	Встреча.Тема КАК theme,
		|	Встреча.Комментарий КАК comment,
		|	Встреча.Представление КАК representation
		|ИЗ
		|	Документ.Встреча КАК Встреча";
		Если НЕ Ссылка = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "	
				|ГДЕ
				|	Встреча.Ссылка = &Ссылка
				|	И НЕ Встреча.ПометкаУдаления";	
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
		КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбщаяСтруктураВзаимодействий = Новый Структура;
	
	МассивВзаимодействий = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураВзаимодействия = Новый Структура;
		
		СтруктураВзаимодействия.Вставить("uuid", XMLСтрока(ВыборкаДетальныеЗаписи.uuid));
		СтруктураВзаимодействия.Вставить("num", ВыборкаДетальныеЗаписи.num);
		СтруктураВзаимодействия.Вставить("date", Формат(ВыборкаДетальныеЗаписи.date, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("author", ВыборкаДетальныеЗаписи.author);
		СтруктураВзаимодействия.Вставить("importance", XMLСтрока(ВыборкаДетальныеЗаписи.importance));
		
		СтруктураВзаимодействия.Вставить("date_beginning", Формат(ВыборкаДетальныеЗаписи.date_beginning, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("date_ending", Формат(ВыборкаДетальныеЗаписи.date_ending, "ДЛФ=DT"));
		СтруктураВзаимодействия.Вставить("meeting_place", ВыборкаДетальныеЗаписи.meeting_place);
		СтруктураВзаимодействия.Вставить("description", ВыборкаДетальныеЗаписи.description);
		СтруктураВзаимодействия.Вставить("responsible", Строка(ВыборкаДетальныеЗаписи.responsible));
		СтруктураВзаимодействия.Вставить("members_list", ВыборкаДетальныеЗаписи.members_list);
		СтруктураВзаимодействия.Вставить("actions_basis", Строка(ВыборкаДетальныеЗаписи.actions_basis));	
		СтруктураВзаимодействия.Вставить("theme", ВыборкаДетальныеЗаписи.theme);		
		СтруктураВзаимодействия.Вставить("comment", ВыборкаДетальныеЗаписи.comment);
		СтруктураВзаимодействия.Вставить("representation", ВыборкаДетальныеЗаписи.representation);
		
		ТипДокумента = react_ОбщегоНазначения.ПолучитьТипВзаимодействия(ВыборкаДетальныеЗаписи.uuid);
		СтруктураВзаимодействия.Вставить("typeBack", ТипДокумента.typeBack);
		СтруктураВзаимодействия.Вставить("type", ТипДокумента.type);
		СтруктураВзаимодействия.Вставить("frontDocName", ТипДокумента.frontDocName);
		
		МассивВзаимодействий.Добавить(СтруктураВзаимодействия);
	КонецЦикла;
	
	ОбщаяСтруктураВзаимодействий.Вставить("actions", МассивВзаимодействий);
	
	Возврат react_ОбщегоНазначения.МассивСтруктурВJSON(ОбщаяСтруктураВзаимодействий);
	
КонецФункции

#КонецОбласти

#Область ЗаписьИСозданиеДокументов

Функция СоздатьОбновитьДокумент(Тело) Экспорт

	СтруктураТела = react_ОбщегоНазначения.ПолучитьСтруктуруИзJSON(Тело);
	
	Если СтруктураТела.typeBack = "Встреча" Тогда
		Возврат СоздатьОбновитьДокументВстреча(СтруктураТела);
	ИначеЕсли СтруктураТела.typeBack = "ЗапланированноеВзаимодействие" Тогда
		//Возврат СоздатьОбновитьДокументЗапланированноеВзаимодействие(СтруктураТела);
	ИначеЕсли СтруктураТела.typeBack = "СообщениеSMS" Тогда
		//Возврат СоздатьОбновитьДокументСообщениеSMS(СтруктураТела);
	ИначеЕсли СтруктураТела.typeBack = "ТелефонныйЗвонок" Тогда
		//Возврат СоздатьОбновитьДокументТелефонныйЗвонок(СтруктураТела);
	ИначеЕсли СтруктураТела.typeBack = "ЭлектронноеПисьмоВходящее" Тогда
		//Возврат СоздатьОбновитьДокументЭлектронноеПисьмоВходящее(СтруктураТела);
	ИначеЕсли СтруктураТела.typeBack = "ЭлектронноеПисьмоИсходящее" Тогда
		//Возврат СоздатьОбновитьДокументЭлектронноеПисьмоИсходящее(СтруктураТела);		
	КонецЕсли;

КонецФункции

Функция СоздатьОбновитьДокументВстреча(СтруктураТела)
	
	Если НЕ ЗначениеЗаполнено(СтруктураТела.uuid) Тогда
		Объект = Документы.Встреча.СоздатьДокумент();
	Иначе
		УникальныйИдентификатор = Новый УникальныйИдентификатор(СтруктураТела.uuid);
		Объект = Документы.Встреча.ПолучитьСсылку(УникальныйИдентификатор).ПолучитьОбъект();
	КонецЕсли;
	
	Объект.Дата 					= Дата(СтруктураТела.date);
	Объект.Автор 					= Справочники.Пользователи.НайтиПоНаименованию(СтруктураТела.author);
	Объект.Важность 				= react_ОбщегоНазначения.ПолучитьСсылкуНаВариантВажности(СтруктураТела.importance);
	Объект.ДатаНачала 				= Дата(СтруктураТела.date_beginning);
	Объект.ДатаОкончания 			= Дата(СтруктураТела.date_ending);
	Объект.МестоПроведенияВстречи 	= СтруктураТела.meeting_place;
	Объект.Описание 				= СтруктураТела.description;
	Объект.Ответственный 			= Справочники.Пользователи.НайтиПоНаименованию(СтруктураТела.responsible);
	
	ТипДокументаОснование 			= react_ОбщегоНазначения.ПолучитьТипВзаимодействияПоПредставлению(СтруктураТела.actions_basis_representation);
	Объект.ВзаимодействиеОснование 	= Документы[ТипДокументаОснование].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТела.actions_basis));
	
	Объект.Тема 					= СтруктураТела.theme;
	Объект.Комментарий 				= СтруктураТела.comment;
	
	Ответ = Новый Структура("status, error");
	КодСтатус = 500;
	Попытка
		Объект.Записать();
		
		КодСтатус = 200;
		Ответ.status = "success";
		Ответ.error = "no error";
	Исключение
		КодСтатус = 500;
		Ответ.status = "failed";
		Ответ.error = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Новый Структура("Тело, Код", react_ОбщегоНазначения.МассивСтруктурВJSON(Ответ), КодСтатус);
	
КонецФункции

Функция СоздатьОбновитьДокументЗапланированноеВзаимодействие(СтруктураТела)
КонецФункции

Функция СоздатьОбновитьДокументСообщениеSMS(СтруктураТела)
КонецФункции

Функция СоздатьОбновитьДокументТелефонныйЗвонок(СтруктураТела)
КонецФункции

Функция СоздатьОбновитьДокументЭлектронноеПисьмоВходящее(СтруктураТела)
КонецФункции

Функция СоздатьОбновитьДокументЭлектронноеПисьмоИсходящее(СтруктураТела)
КонецФункции

#КонецОбласти