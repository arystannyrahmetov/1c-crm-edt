Функция ПроверитьДанныеДляВхода(Тело) Экспорт
	
	Ошибка = "";
	КодСтатус = 200;
	СтруктураТела = react_ОбщегоНазначения.ПолучитьСтруктуруИзJSON(Тело);
	Почта = СтруктураТела.email;
	Пароль = СтруктураТела.password;
	
	Пользователь = ПолучитьПользователяПоПочте(Почта);
	Если Пользователь = Неопределено Тогда
		Ошибка = "Пользователь с такой почтой не зарегистрирован!";
		//КодСтатус = 401;
	КонецЕсли;
	
	Если НЕ Пользователь = Неопределено Тогда
		Если НЕ ПарольСовпадает(Пароль, Пользователь.ИдентификаторПользователяИБ) Тогда
			Ошибка = "Пароль не верен!";
			//КодСтатус = 401;
		КонецЕсли;
	КонецЕсли;
	
    СтруктураОтвета = Новый Структура("user, error", 
							?(НЕ ЗначениеЗаполнено(Ошибка), ПолучитьДанныеПользователя(Пользователь), ""), 
							Ошибка);
	Ответ = Новый Структура("Код, Тело", КодСтатус, 
							react_ОбщегоНазначения.МассивСтруктурВJSON(СтруктураОтвета));						
							
	Возврат Ответ;						
							
КонецФункции

Функция ПолучитьПользователяПоПочте(Почта) Экспорт

	Запрос = Новый Запрос;
	
	// Установка значений параметров
	Запрос.УстановитьПараметр("Адрес", Почта);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И ПользователиКонтактнаяИнформация.АдресЭП = &Адрес";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выборка
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Пользователь;
	КонецЦикла;

КонецФункции

Функция ПарольСовпадает(Пароль, ИдентификаторПользователяИБ) Экспорт
	
	Если ТипЗнч(ИдентификаторПользователяИБ) <> Тип("УникальныйИдентификатор") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ИдентификаторПользователяИБ);
	
	Если ТипЗнч(ПользовательИБ) <> Тип("ПользовательИнформационнойБазы") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ХешСуммаПароляСовпадает(Пароль, ПользовательИБ.СохраняемоеЗначениеПароля);
	
КонецФункции

// Проверяет что у первого и второго паролей совпадают первые или вторые хеш-суммы.
//
// Параметры:
//  СохраняемоеЗначениеПервогоПароля - Строка - содержит хеш-суммы сохраняемого пароля в формате
//                                       одноименного свойства типа ПользовательИнформационнойБазы.
//
//  СохраняемоеЗначениеВторогоПароля - Строка - то же, что и СохраняемоеЗначениеВторогоПароля.
//
//
Функция ХешСуммаПароляСовпадает(СохраняемоеЗначениеПервогоПароля, СохраняемоеЗначениеВторогоПароля)
	
	Если СохраняемоеЗначениеПервогоПароля = СохраняемоеЗначениеВторогоПароля Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьДанныеПользователя(Пользователь) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК id,
		|	Пользователи.Наименование КАК name,
		|	ПользователиКонтактнаяИнформация.Представление КАК email,
		|	Пользователи.СсылкаНаФотографию КАК PhotoUrl,
		|	""Member"" КАК role,
		|	Пользователи.Комментарий КАК info,
		|	""Добро пожаловать в чат!"" КАК welcomeMessage
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ПользователиКонтактнаяИнформация.Ссылка = Пользователи.Ссылка
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И Пользователи.Ссылка = &Пользователь";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Структура = Новый Структура();
		Структура.Вставить("username", ВыборкаДетальныеЗаписи.name);
		Структура.Вставить("uuid", XMLСтрока(Пользователь.УникальныйИдентификатор())); 
		
		Структура.Вставить("id", XMLСтрока(ВыборкаДетальныеЗаписи.id));
		Структура.Вставить("name", ВыборкаДетальныеЗаписи.name);
		Структура.Вставить("email", ВыборкаДетальныеЗаписи.email);
		Структура.Вставить("photoUrl", ВыборкаДетальныеЗаписи.PhotoUrl);
		Структура.Вставить("role", ВыборкаДетальныеЗаписи.role);
		Структура.Вставить("info", ВыборкаДетальныеЗаписи.info);
		Структура.Вставить("welcomeMessage", ВыборкаДетальныеЗаписи.welcomeMessage);
		
		
		Возврат Структура;	
		
	КонецЦикла;
	
КонецФункции

