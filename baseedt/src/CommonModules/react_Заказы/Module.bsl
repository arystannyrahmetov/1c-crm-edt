Функция ПолучитьЗаказы(ЗапросHTTP) Экспорт
	
	Идентификатор = ЗапросHTTP.ПараметрыЗапроса.Получить("uuid");
	ПризнакПечати = ЗапросHTTP.ПараметрыЗапроса.Получить("print");

	ТипДокумента = "ЗаказКлиента";
	Если ЗначениеЗаполнено(Идентификатор) И НЕ ПризнакПечати Тогда
		Возврат ПолучитьЗаказПоUUID(Идентификатор, ТипДокумента)
	ИначеЕсли ЗначениеЗаполнено(Идентификатор) И ПризнакПечати Тогда
		Возврат ПолучитьПечатнуюФорму(Идентификатор, ТипДокумента)
	Иначе
		Возврат ПолучитьВсеЗаказы();
	КонецЕсли;
		
КонецФункции

Функция ПолучитьВсеЗаказы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Заказ.Ссылка КАК uuid,
		|	Заказ.Номер КАК num,
		|	Заказ.Дата КАК date,
		|	Заказ.Автор.Представление КАК author,
		|	Заказ.Состояние КАК status,
		|	Заказ.Организация КАК organization,
		|	Заказ.Контрагент КАК client,
		|	Заказ.Событие КАК action,
		|	Заказ.Склад КАК warehouse
		|ИЗ
		|	Документ.ЗаказКлиента КАК Заказ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбщаяСтруктураЗаказов = Новый Структура;
	
	МассивЗаказов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураЗаказа = Новый Структура;
		
		СтруктураЗаказа.Вставить("uuid", XMLСтрока(ВыборкаДетальныеЗаписи.uuid));
		СтруктураЗаказа.Вставить("num", ВыборкаДетальныеЗаписи.num);
		СтруктураЗаказа.Вставить("date", Формат(ВыборкаДетальныеЗаписи.date, "ДЛФ=DT"));
		
		СтруктураЗаказа.Вставить("author", Строка(ВыборкаДетальныеЗаписи.author));
		СтруктураЗаказа.Вставить("author_uuid", XMLСтрока(ВыборкаДетальныеЗаписи.author));
		
		СтруктураЗаказа.Вставить("status", Строка(ВыборкаДетальныеЗаписи.status));
		
		СтруктураЗаказа.Вставить("organization", Строка(ВыборкаДетальныеЗаписи.organization));
		СтруктураЗаказа.Вставить("organization_uuid", XMLСтрока(ВыборкаДетальныеЗаписи.organization));
		
		СтруктураЗаказа.Вставить("client", Строка(ВыборкаДетальныеЗаписи.client)); 
		СтруктураЗаказа.Вставить("client_uuid", XMLСтрока(ВыборкаДетальныеЗаписи.client));
		
		СтруктураЗаказа.Вставить("action", Строка(ВыборкаДетальныеЗаписи.action));
		СтруктураЗаказа.Вставить("action_uuid", XMLСтрока(ВыборкаДетальныеЗаписи.action));
		
		СтруктураЗаказа.Вставить("warehouse", Строка(ВыборкаДетальныеЗаписи.warehouse));
		СтруктураЗаказа.Вставить("warehouse_uuid", XMLСтрока(ВыборкаДетальныеЗаписи.warehouse));
		
		СтруктураЗаказа.Вставить("typeBack", "ЗаказКлиента");
		СтруктураЗаказа.Вставить("type", "order");
		СтруктураЗаказа.Вставить("frontDocName", "Заказ клиента");
		
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	
	ОбщаяСтруктураЗаказов.Вставить("orders", МассивЗаказов);
	
	Возврат react_ОбщегоНазначения.МассивСтруктурВJSON(ОбщаяСтруктураЗаказов);
	
КонецФункции

Функция ПолучитьЗаказПоUUID(uuid, ТипДокумента) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор(uuid);
	
	Ссылка = Документы[ТипДокумента].ПолучитьСсылку(Идентификатор);
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
	    Возврат ПолучитьДокументыЗаказКлиента(Ссылка);
	КонецЕсли;
		
КонецФункции

#Область ПолучениеДокументов

//done
Функция ПолучитьДокументыЗаказКлиента(Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Заказ.Ссылка КАК uuid,
		|	Заказ.Номер КАК num,
		|	Заказ.Дата КАК date,
		|	Заказ.Автор.Представление КАК author,
		|	Заказ.Состояние КАК status,
		|	Заказ.Организация КАК organization,
		|	Заказ.Контрагент КАК client,
		|	Заказ.Событие КАК action,
		|	Заказ.Склад КАК warehouse,
		|	Заказ.Товары.(
		|		НомерСтроки КАК id,
		|		Номенклатура КАК good,
		|		Количество КАК amount,
		|		Цена КАК price,
		|		Сумма КАК sum
		|	) КАК Товары
		|ИЗ
		|	Документ.ЗаказКлиента КАК Заказ";
		Если НЕ Ссылка = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "	
				|ГДЕ
				|	Заказ.Ссылка = &Ссылка
				|	И НЕ Заказ.ПометкаУдаления";	
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
		КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбщаяСтруктураЗаказов = Новый Структура;
	
	МассивЗаказов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураЗаказа = Новый Структура;
		
		СтруктураЗаказа.Вставить("uuid", XMLСтрока(ВыборкаДетальныеЗаписи.uuid));
		СтруктураЗаказа.Вставить("representation", Строка(ВыборкаДетальныеЗаписи.uuid));
		
		СтруктураЗаказа.Вставить("num", ВыборкаДетальныеЗаписи.num);
		СтруктураЗаказа.Вставить("date", Формат(ВыборкаДетальныеЗаписи.date, "ДЛФ=DT"));
		
		СтруктураЗаказа.Вставить("author", Строка(ВыборкаДетальныеЗаписи.author));
		СтруктураЗаказа.Вставить("author_uuid", XMLСтрока(ВыборкаДетальныеЗаписи.author));
		
		СтруктураЗаказа.Вставить("status", Строка(ВыборкаДетальныеЗаписи.status));
		
		СтруктураЗаказа.Вставить("organization", Строка(ВыборкаДетальныеЗаписи.organization));
		СтруктураЗаказа.Вставить("organization_uuid", XMLСтрока(ВыборкаДетальныеЗаписи.organization));
		
		СтруктураЗаказа.Вставить("client", Строка(ВыборкаДетальныеЗаписи.client)); 
		СтруктураЗаказа.Вставить("client_uuid", XMLСтрока(ВыборкаДетальныеЗаписи.client));
		
		СтруктураЗаказа.Вставить("action", Строка(ВыборкаДетальныеЗаписи.action));
		СтруктураЗаказа.Вставить("action_uuid", XMLСтрока(ВыборкаДетальныеЗаписи.action));
		
		СтруктураЗаказа.Вставить("warehouse", Строка(ВыборкаДетальныеЗаписи.warehouse));
		СтруктураЗаказа.Вставить("warehouse_uuid", XMLСтрока(ВыборкаДетальныеЗаписи.warehouse));
		
		СтруктураЗаказа.Вставить("typeBack", "ЗаказКлиента");
		СтруктураЗаказа.Вставить("type", "order");
		СтруктураЗаказа.Вставить("frontDocName", "Заказ клиента");
		
		ВыборкаТовары = ВыборкаДетальныеЗаписи.Товары.Выбрать();
		
		МассивТоваров = Новый Массив;
		Пока ВыборкаТовары.Следующий() Цикл
			СтруктураТовара = Новый Структура;

			СтруктураТовара.Вставить("id", ВыборкаТовары.id);

			СтруктураТовара.Вставить("good", ВыборкаТовары.good.Наименование);		 
			СтруктураТовара.Вставить("good_uuid", XMLСтрока(ВыборкаТовары.good));

			СтруктураТовара.Вставить("amount", ВыборкаТовары.amount);
			СтруктураТовара.Вставить("price", ВыборкаТовары.price);
			СтруктураТовара.Вставить("sum", ВыборкаТовары.sum); 

			МассивТоваров.Добавить(СтруктураТовара);
		КонецЦикла;
		 
		СтруктураЗаказа.Вставить("goods", МассивТоваров);
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	
	ОбщаяСтруктураЗаказов.Вставить("orders", СтруктураЗаказа);
	
	Возврат react_ОбщегоНазначения.МассивСтруктурВJSON(ОбщаяСтруктураЗаказов);
	
КонецФункции
 
#КонецОбласти

#Область ЗаписьИСозданиеДокументов

Функция СоздатьОбновитьДокумент(Тело) Экспорт

	СтруктураТела = react_ОбщегоНазначения.ПолучитьСтруктуруИзJSON(Тело);
	
	Если СтруктураТела.typeBack = "ЗаказКлиента" Тогда
		Возврат СоздатьОбновитьДокументЗаказКлиента(СтруктураТела);
	ИначеЕсли СтруктураТела.typeBack = "РасходнаяНакладная" Тогда
		
	ИначеЕсли СтруктураТела.typeBack = "ПриходнаяНакладная" Тогда
				
	КонецЕсли;

КонецФункции

Функция СоздатьОбновитьДокументЗаказКлиента(СтруктураТела)
	
	Если НЕ ЗначениеЗаполнено(СтруктураТела.uuid) Тогда
		Объект = Документы.Встреча.СоздатьДокумент();
	Иначе
		УникальныйИдентификатор = Новый УникальныйИдентификатор(СтруктураТела.uuid);
		Объект = Документы.Встреча.ПолучитьСсылку(УникальныйИдентификатор).ПолучитьОбъект();
	КонецЕсли;
	
	Объект.Дата 					= Дата(СтруктураТела.date);
	Объект.Автор 					= Справочники.Пользователи.НайтиПоНаименованию(СтруктураТела.author);
	Объект.Важность 				= react_ОбщегоНазначения.ПолучитьСсылкуНаВариантВажности(СтруктураТела.importance);
	Объект.ДатаНачала 				= Дата(СтруктураТела.date_beginning);
	Объект.ДатаОкончания 			= Дата(СтруктураТела.date_ending);
	Объект.МестоПроведенияВстречи 	= СтруктураТела.meeting_place;
	Объект.Описание 				= СтруктураТела.description;
	Объект.Ответственный 			= Справочники.Пользователи.НайтиПоНаименованию(СтруктураТела.responsible);
	
	ТипДокументаОснование 			= react_ОбщегоНазначения.ПолучитьТипВзаимодействияПоПредставлению(СтруктураТела.actions_basis_representation);
	Объект.ВзаимодействиеОснование 	= Документы[ТипДокументаОснование].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТела.actions_basis));
	
	Объект.Тема 					= СтруктураТела.theme;
	Объект.Комментарий 				= СтруктураТела.comment;
	
	Ответ = Новый Структура("status, error");
	КодСтатус = 500;
	Попытка
		Объект.Записать();
		
		КодСтатус = 200;
		Ответ.status = "success";
		Ответ.error = "no error";
	Исключение
		КодСтатус = 500;
		Ответ.status = "failed";
		Ответ.error = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Новый Структура("Тело, Код", react_ОбщегоНазначения.МассивСтруктурВJSON(Ответ), КодСтатус);
	
КонецФункции

#КонецОбласти

#Область Печать

Функция ПолучитьПечатнуюФорму(uuid, ТипДокумента) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор(uuid);
	
	Ссылка = Документы[ТипДокумента].ПолучитьСсылку(Идентификатор);
	
	//временно
	СсылкаНаНакладную = Документы.РасходнаяНакладная.НайтиПоРеквизиту("ЗаказКлиента", Ссылка);
	ТабличныйДокумент = Документы.РасходнаяНакладная.СформироватьРасходнуюНакладную(СсылкаНаНакладную);
	
	//выравнивание по ширине
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РА";

	BASEСтрока = ТабличныйДокументВСтроку(ТабличныйДокумент);
	
	СтруктураОтвета = Новый Структура("pdf_base64", BASEСтрока);
	
	Возврат react_ОбщегоНазначения.МассивСтруктурВJSON(СтруктураОтвета);
		
КонецФункции

Функция ТабличныйДокументВСтроку(ТабличныйДокумент) Экспорт
		
			
	ИмяФайла = ПолучитьИмяВременногоФайла("PDF");
	
	
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
	Данные = Новый ДвоичныеДанные(ИмяФайла);
	
	
	BASEСтрока = Base64Строка(Данные);
	
	
	ТабличныйДокумент = Неопределено;
	
	
	УдалитьФайлы(ИмяФайла);
	
	
	Возврат BASEСтрока;
			
	
КонецФункции

#КонецОбласти